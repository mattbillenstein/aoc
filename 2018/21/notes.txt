#ip 5
         0  seti 123 0 4
         1	bani 4 456 4
         2	eqri 4 72 4
         3	addr 4 5 5
         4	seti 0 0 5
         5	seti 0 8 4
top      6	bori 4 65536 3      reg3 = reg4 | 65536 # set 16th bit of reg3
         7	seti 14464005 5 4   reg4 = 14464005     # 0b110111001011010000000101
outer    8	bani 3 255 2        reg2 = reg3 & 255   # set reg2 to 0 - always?
         9	addr 4 2 4          reg4 += reg2        # noop?
        10	bani 4 16777215 4   reg4 &= 16777215    # reg4 - mask bottom 3 bytes
        11	muli 4 65899 4      reg4 *= 65899       # mul
        12	bani 4 16777215 4   reg4 &= 16777215    # reg4 - mask bottom 3 bytes - equal now to 16270103
        13	gtir 256 3 2        reg2 = 256 > reg3
        14	addr 2 5 5          ip += reg2          # skip next if reg3 < 256
        15	addi 5 1 5          ip += 1             # skip next instruction
        16	seti 27 7 5         jmp :test
        17	seti 0 3 2          reg2 = 0
inner   18	addi 2 1 1          reg1 = reg2 + 1
        19	muli 1 256 1        reg1 = reg1 * 256   # left shift 8?
        20	gtrr 1 3 1          reg1 = reg1 > reg3  # jump :foo out of loop if reg1 > reg3
        21	addr 1 5 5          ip += reg1
        22	addi 5 1 5          ip += 1
        23	seti 25 2 5         jmp :foo
        24	addi 2 1 2          reg2 += 1
        25	seti 17 9 5         jmp :inner
foo     26	setr 2 2 3          reg3 = reg2         # need to get here reg2 > 256
        27	seti 7 3 5          jmp :outer
test    28	eqrr 4 0 2          reg2 = reg0 == reg4 # halt if reg0 == reg4
        29	addr 2 5 5
        30	seti 5 9 5          jmp :top
